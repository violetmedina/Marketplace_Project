{"ast":null,"code":"var _jsxFileName = \"/Users/veronicataucci/Desktop/projects/Marketplace_Project/client/src/components/Test.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Test = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n\n  // this function will analyze the text entered by the user and display the number of occurrences of each letter of the alphabet.\n  const analyzeText = text => {\n    let counts = new Array(26).fill(0); // to store count of each letter\n    for (let i = 0; i < text.length; i++) {\n      let index = text[i].charCodeAt(0) - 97; // get index in array using char code at 0th position in string\n      if (index >= 0 && index < 26)\n        // only if character is an alphabet\n        counts[index] += 1; // incrementing the count corresponding to that character\n    }\n\n    return counts;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your text here...\",\n      onChange: e => setUserInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const counts = analyzeText(userInput);\n        // display results in a div\n        let output = \"Letter\\tCount\\n\";\n        for (let i = 0; i < counts.length; i++) {\n          let letter = String.fromCharCode(97 + i);\n          output += `${letter}\\t${counts[i]}\\n`;\n        }\n        document.getElementById(\"result\").innerHTML = output;\n      },\n      children: \"Analyze Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(Test, \"5m2DpaTPYgx4BaqjxYL18HEa8GU=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["useState","Test","userInput","setUserInput","analyzeText","text","counts","Array","fill","i","length","index","charCodeAt","e","target","value","output","letter","String","fromCharCode","document","getElementById","innerHTML"],"sources":["/Users/veronicataucci/Desktop/projects/Marketplace_Project/client/src/components/Test.js"],"sourcesContent":["import {useState} from 'react'\n\nconst Test = () => {\n    const [userInput, setUserInput] = useState(\"\");\n\n    // this function will analyze the text entered by the user and display the number of occurrences of each letter of the alphabet.\n    const analyzeText = (text) => {\n        let counts = new Array(26).fill(0); // to store count of each letter\n        for (let i = 0; i < text.length; i++) {\n            let index = text[i].charCodeAt(0) - 97; // get index in array using char code at 0th position in string\n            if (index >= 0 && index < 26)\n                // only if character is an alphabet\n                counts[index] += 1; // incrementing the count corresponding to that character\n        }\n        return counts;\n    };\n    return (\n        <div>\n            <h1>Text Analysis</h1>\n            <input\n                type=\"text\"\n                placeholder=\"Enter your text here...\"\n                onChange={(e) => setUserInput(e.target.value)}\n            />\n            <button\n                onClick={() => {\n                    const counts = analyzeText(userInput);\n                    // display results in a div\n                    let output = \"Letter\\tCount\\n\";\n                    for (let i = 0; i < counts.length; i++) {\n                        let letter = String.fromCharCode(97 + i);\n                        output += `${letter}\\t${counts[i]}\\n`;\n                    }\n                    document.getElementById(\"result\").innerHTML = output;\n                }}\n            >\n                Analyze Text\n            </button>{\" \"}\n            <div id=\"result\"></div>{\" \"}\n        </div>\n    );\n};\n\nexport default Test;"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAA;AAE9B,MAAMC,IAAI,GAAG,MAAM;EAAA;EACf,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMI,WAAW,GAAIC,IAAI,IAAK;IAC1B,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC,IAAIE,KAAK,GAAGN,IAAI,CAACI,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;MACxC,IAAID,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,EAAE;QACxB;QACAL,MAAM,CAACK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5B;;IACA,OAAOL,MAAM;EACjB,CAAC;EACD,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,eACtB;MACI,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,yBAAyB;MACrC,QAAQ,EAAGO,CAAC,IAAKV,YAAY,CAACU,CAAC,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAChD,eACF;MACI,OAAO,EAAE,MAAM;QACX,MAAMT,MAAM,GAAGF,WAAW,CAACF,SAAS,CAAC;QACrC;QACA,IAAIc,MAAM,GAAG,iBAAiB;QAC9B,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;UACpC,IAAIQ,MAAM,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGV,CAAC,CAAC;UACxCO,MAAM,IAAK,GAAEC,MAAO,KAAIX,MAAM,CAACG,CAAC,CAAE,IAAG;QACzC;QACAW,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACC,SAAS,GAAGN,MAAM;MACxD,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGG,EAAC,GAAG,eACb;MAAK,EAAE,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAO,EAAC,GAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACzB;AAEd,CAAC;AAAC,GAvCIf,IAAI;AAAA,KAAJA,IAAI;AAyCV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}